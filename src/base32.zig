//! https://www.crockford.com/base32.html

const std = @import("std");
const string = []const u8;

const alphabet = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";

const dec = [_]u8{
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,
	0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14, 0x15, 0xFF,
	0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C, 0x1D, 0x1E,
	0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,
	0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,
	0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,
	0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

pub fn decode(dest: []u8, source: []const u8) void {
    // Optimized unrolled loop ahead.
    // From https://github.com/RobThree/NUlid

    // 6 bytes timestamp (48 bits)
    dest[0] = (dec[source[0]] << 5) | dec[source[1]];
    dest[1] = (dec[source[2]] << 3) | (dec[source[3]] >> 2);
    dest[2] = (dec[source[3]] << 6) | (dec[source[4]] << 1) | (dec[source[5]] >> 4);
    dest[3] = (dec[source[5]] << 4) | (dec[source[6]] >> 1);
    dest[4] = (dec[source[6]] << 7) | (dec[source[7]] << 2) | (dec[source[8]] >> 3);
    dest[5] = (dec[source[8]] << 5) | dec[source[9]];

    // dest bytes of entropy (80 bits)
    dest[6] = (dec[source[10]] << 3) | (dec[source[11]] >> 2);
    dest[7] = (dec[source[11]] << 6) | (dec[source[12]] << 1) | (dec[source[13]] >> 4);
    dest[8] = (dec[source[13]] << 4) | (dec[source[14]] >> 1);
    dest[9] = (dec[source[14]] << 7) | (dec[source[15]] << 2) | (dec[source[16]] >> 3);
    dest[10] = (dec[source[16]] << 5) | dec[source[17]];
    dest[11] = (dec[source[18]] << 3) | dec[source[19]]>>2;
    dest[12] = (dec[source[19]] << 6) | (dec[source[20]] << 1) | (dec[source[21]] >> 4);
    dest[13] = (dec[source[21]] << 4) | (dec[source[22]] >> 1);
    dest[14] = (dec[source[22]] << 7) | (dec[source[23]] << 2) | (dec[source[24]] >> 3);
    dest[15] = (dec[source[24]] << 5) | dec[source[25]];
}

pub fn encode(id: [16]u8) [26] u8 {
      var dst: [26]u8 = undefined;
      // 10 byte timestamp
      dst[0] = alphabet[(id[0]&224)>>5];
      dst[1] = alphabet[id[0]&31];
      dst[2] = alphabet[(id[1]&248)>>3];
      dst[3] = alphabet[((id[1]&7)<<2)|((id[2]&192)>>6)];
      dst[4] = alphabet[(id[2]&62)>>1];
      dst[5] = alphabet[((id[2]&1)<<4)|((id[3]&240)>>4)];
      dst[6] = alphabet[((id[3]&15)<<1)|((id[4]&128)>>7)];
      dst[7] = alphabet[(id[4]&124)>>2];
      dst[8] = alphabet[((id[4]&3)<<3)|((id[5]&224)>>5)];
      dst[9] = alphabet[id[5]&31];

      // 16 bytes of entropy
      dst[10] = alphabet[(id[6]&248)>>3];
      dst[11] = alphabet[((id[6]&7)<<2)|((id[7]&192)>>6)];
      dst[12] = alphabet[(id[7]&62)>>1];
      dst[13] = alphabet[((id[7]&1)<<4)|((id[8]&240)>>4)];
      dst[14] = alphabet[((id[8]&15)<<1)|((id[9]&128)>>7)];
      dst[15] = alphabet[(id[9]&124)>>2];
      dst[16] = alphabet[((id[9]&3)<<3)|((id[10]&224)>>5)];
      dst[17] = alphabet[id[10]&31];
      dst[18] = alphabet[(id[11]&248)>>3];
      dst[19] = alphabet[((id[11]&7)<<2)|((id[12]&192)>>6)];
      dst[20] = alphabet[(id[12]&62)>>1];
      dst[21] = alphabet[((id[12]&1)<<4)|((id[13]&240)>>4)];
      dst[22] = alphabet[((id[13]&15)<<1)|((id[14]&128)>>7)];
      dst[23] = alphabet[(id[14]&124)>>2];
      dst[24] = alphabet[((id[14]&3)<<3)|((id[15]&224)>>5)];
      dst[25] = alphabet[id[15]&31];

      return dst;
}
